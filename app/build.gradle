import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: "$project.rootDir/gradle/common.gradle"

android {
    namespace 'com.shifthackz.joyreactor'
    defaultConfig {
        applicationId "com.shifthackz.joyreactor"
        versionCode 1
        versionName "0.0.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    def hasPropertiesFile = new File("app/keystore/signing.properties").exists()
    if (hasPropertiesFile) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("keystore/signing.properties")))
        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.password']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }
}

dependencies {
    implementation project(":data")
    implementation project(":domain")
    implementation project(":network")
    implementation project(":nsfw")
    implementation project(":presentation")
    implementation project(":storage")
    implementation di.koinCore
    implementation di.koinAndroid
    implementation androidx.splash
}

// Workaround for "Bug: baseline.profm not deterministic"
//
// Reference     : https://f-droid.org/docs/Reproducible_Builds/#bug-baselineprofm-not-deterministic
// Fix snippet   : https://gist.github.com/obfusk/61046e09cee352ae6dd109911534b12e
// Issue tracker : https://issuetracker.google.com/issues/231837768
project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}
